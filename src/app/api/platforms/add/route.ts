import { NextRequest, NextResponse } from 'next/server';
import { PlatformConfig } from '@/config/platforms';
import { ContentCollectionService } from '@/lib/rss-collector-refactored';
import { PlatformProfileManager } from '@/lib/platform-profile-manager';

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    
    // 자동 프로필 생성 모드 vs 수동 추가 모드
    if (body.autoGenerate && body.baseUrl) {
      // 자동 프로필 생성
      console.log(`🔍 자동 프로필 생성 시작: ${body.baseUrl}`);
      
      const extendedProfile = await PlatformProfileManager.autoGenerateProfile(
        body.baseUrl,
        body.name,
        body
      );
      
      const collectionService = new ContentCollectionService();
      
      // 플랫폼 추가 및 테스트
      await collectionService.addNewPlatform(extendedProfile);
      
      return NextResponse.json({
        success: true,
        message: `플랫폼 '${extendedProfile.name}' 자동 생성 및 추가 완료`,
        platform: extendedProfile,
        autoGenerated: true
      });
      
    } else {
      // 수동 플랫폼 추가
      const platformConfig = body as PlatformConfig;
      
      // 요청 검증
      if (!platformConfig.id || !platformConfig.name || !platformConfig.baseUrl) {
        return NextResponse.json({
          success: false,
          error: '필수 필드가 누락되었습니다: id, name, baseUrl'
        }, { status: 400 });
      }

      const collectionService = new ContentCollectionService();
      
      // 확장된 프로필 생성
      const extendedProfile = PlatformProfileManager.generateExtendedProfile(platformConfig);
      
      // 플랫폼 추가 및 테스트
      await collectionService.addNewPlatform(platformConfig);
      
      // 현재 플랫폼 통계 반환
      const stats = collectionService.getCollectionStats();
      
      return NextResponse.json({
        success: true,
        message: `플랫폼 '${platformConfig.name}' 추가 및 테스트 완료`,
        platform: extendedProfile,
        stats,
        autoGenerated: false
      });
    }

  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error('❌ 플랫폼 추가 실패:', error);
    
    return NextResponse.json({
      success: false,
      error: '플랫폼 추가에 실패했습니다',
      details: errorMessage
    }, { status: 500 });
  }
}

// GET 요청으로 플랫폼 통계 조회
export async function GET() {
  try {
    const collectionService = new ContentCollectionService();
    const stats = collectionService.getCollectionStats();
    
    return NextResponse.json({
      success: true,
      stats
    });
  } catch (error) {
    return NextResponse.json({
      success: false,
      error: '통계 조회에 실패했습니다'
    }, { status: 500 });
  }
}